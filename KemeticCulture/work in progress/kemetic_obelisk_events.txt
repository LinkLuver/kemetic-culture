#namespace = obelisk_raising

#obelisk_raising.0101 = {
#	title = obelisk_raising.0101.t
#	desc = obelisk_raising.0101.desc
#	theme = faith
	left_portrait = {
		character = root
		animation = personality_rational
	}
	right_portrait = {
		character = scope:ancestor
		animation = personality_zealous
	}
	lower_right_portrait = scope:foe
	override_background = { event_background = throne_room }

	immediate = {
		# Save some variables as scopes for easy loc.
		if = {
			limit = { exists = var:ancestor_to_bury }
			var:ancestor_to_bury = { save_scope_as = ancestor }
		}
		if = {
			limit = { exists = var:recent_conquest_victory }
			var:recent_conquest_victory = { save_scope_as = foe }
		}
		if = {
			limit = { exists = var:recent_rank_increase }
			var:recent_rank_increase = { save_scope_as = new_title }
		}
	}

	# Bury an ancestor.
	option = {
		name = obelisk_raising.0101.a
		# For family.
		trigger = { has_variable = ancestor_to_bury }

		# Note the type going forwards.
		save_scope_value_as = {
			name = stele_type
			value = flag:ancestor
		}
		# Inform root & proceed.
		custom_tooltip = obelisk_raising.0101.a.tt
		trigger_event = obelisk_raising.0111

		stress_impact = {
			humble = medium_stress_impact_loss
			arrogant = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_compassion = 0.5
				ai_honor = 0.25
			}
			modifier = {	# Weight up for stress.
				add = 20
				has_trait = humble
			}
			modifier = {	# Weight down for stress.
				add = -20
				has_trait = arrogant
			}
		}
	}
	
	# Commemorate a conquest.
	option = {
		name = obelisk_raising.0101.b
		# Won a war that gained them territory.
		trigger = { has_variable = recent_conquest_victory }

		# Note the type going forwards.
		save_scope_value_as = {
			name = stele_type
			value = flag:conquest
		}
		# Inform root & proceed.
		custom_tooltip = obelisk_raising.0101.b.tt
		trigger_event = obelisk_raising.0111

		stress_impact = {
			arrogant = minor_stress_impact_loss
			vengeful = medium_stress_impact_loss
			humble = minor_stress_impact_gain
			forgiving = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_honor = 0.25
			}
			modifier = {	# Weight up for stress.
				add = 10
				has_trait = arrogant
			}
			modifier = {	# Weight up for stress.
				add = 20
				has_trait = vengeful
			}
			modifier = {	# Weight down for stress.
				add = -10
				has_trait = humble
			}
			modifier = {	# Weight down for stress.
				add = -20
				has_trait = forgiving
			}
		}
	}
	
	# Memorialise an increase in rank.
	option = {
		name = obelisk_raising.0101.c
		# Marking going up a rank.
		trigger = { has_variable = recent_rank_increase }

		# Note the type going forwards.
		save_scope_value_as = {
			name = stele_type
			value = flag:promotion
		}
		# Inform root & proceed.
		custom_tooltip = obelisk_raising.0101.c.tt
		trigger_event = obelisk_raising.0111

		stress_impact = {
			arrogant = major_stress_impact_loss
			humble = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_greed = 0.25
			}
			modifier = {	# Weight up for stress.
				add = 30
				has_trait = arrogant
			}
			modifier = {	# Weight down for stress.
				add = -30
				has_trait = humble
			}
		}
	}

	# Actually, nahhhhhh.
	option = {
		name = obelisk_raising.0101.d

		# Give 'em their deposit back.
		add_gold = var:raise_stele_refund
		# Clear the cooldown.
		remove_decision_cooldown = raise_stele_decision

		# No stress impact for opting out.
		ai_chance = {
			# If the AI has opened the interface, it should pick an option.
			base = 0
		}
	}

	# Run some mild clean-up.
	after = {
		# Clean-up the refund value.
		remove_variable = raise_stele_refund
	}
}

scripted_effect fp1_apply_stele_effects = {
	# Apply content-specific effects.
	# Save ancillary characters.
	## Save the commissioning character.
	$LOCATION$ = {
		save_temporary_scope_as = stele_location
		set_variable = {
			name = stele_commissioner
			value = root
			years = fp1_stele_duration_value
		}
	}
	## Create a hidden dummy character from the local area to ascribe the carvings to.
	hidden_effect = {
		# Make the character.
		create_character = {
			age = 25
			random_traits = yes
			gender_female_chance = 50
			dynasty = none
			faith = $LOCATION$.faith
			culture = $LOCATION$.culture
			location = $LOCATION$.title_province
			save_scope_as = carver
		}
		# Save them in the designated county.
		$LOCATION$ = {
			set_variable = {
				name = stele_carver
				value = scope:carver
				years = fp1_stele_duration_value
			}
		}
		# Kill them off.
		scope:carver = {
			death = { death_reason = death_vanished }
		}
	}
	## Ancestor effects. 
	if = {
		limit = { scope:stele_type = flag:ancestor }
		$LOCATION$ = {
			# Set up the container for loc.
			set_variable = {
				name = stele_container
				value = root.var:ancestor_to_bury
				years = fp1_stele_duration_value
			}
			# Plus we want to remember the _type_ of stele we've got, so we can check if it's a character or title in there later.
			set_variable = {
				name = stele_scope_type
				value = flag:character
				years = fp1_stele_duration_value
			}
			# Add the actual modifier.
			## Stronger version for counties with stele-liking cultures.
			if = {
				limit = { 			
					culture = {
						has_cultural_pillar = tradition_pyramid_builders
				    } 
				}
				add_county_modifier = {
					modifier = fp1_stele_raising_ancestors_strong
					years = fp1_stele_duration_value
					desc = obelisk_raising_ancestors_strong_custom_desc
				}
			}
			## Weaker version for counties with cultures that don't.
			else = {
				add_county_modifier = {
					modifier = fp1_stele_raising_ancestors_weak
					years = fp1_stele_duration_value
					desc = obelisk_raising_ancestors_strong_custom_desc
				}
			}
			# Add a generic flag for easy value adjustments elsewhere.
			set_variable = {
				name = stele_slot_occupied
				value = yes
				years = fp1_stele_duration_value
			}
		}
	}
	## Conquest effects.
	if = {
		limit = { scope:stele_type = flag:conquest }
		$LOCATION$ = {
			# Set up the container for loc.
			set_variable = {
				name = stele_container
				value = root.var:recent_conquest_victory
				years = fp1_stele_duration_value
			}
			# Plus we want to remember the _type_ of stele we've got, so we can check if it's a character or title in there later.
			set_variable = {
				name = stele_scope_type
				value = flag:character
				years = fp1_stele_duration_value
			}
			# Add the actual modifier.
			## Stronger version for counties with stele-liking cultures.
			if = {
				limit = {
					culture = {
						has_cultural_pillar = tradition_pyramid_builders
					}
				}
				add_county_modifier = {
					modifier = fp1_stele_raising_conquest_strong
					years = fp1_stele_duration_value
					desc = obelisk_raising_conquest_strong_custom_desc
				}
			}
			## Weaker version for counties with cultures that don't.
			else = {
				add_county_modifier = {
					modifier = fp1_stele_raising_conquest_weak
					years = fp1_stele_duration_value
					desc = obelisk_raising_conquest_strong_custom_desc
				}
			}
			# Add a generic flag for easy value adjustments elsewhere.
			set_variable = {
				name = stele_slot_occupied
				value = yes
				years = fp1_stele_duration_value
			}
		}
	}
	## Promotion effects.
	if = {
		limit = { scope:stele_type = flag:promotion }
		$LOCATION$ = {
			# Set up the container for loc.
			set_variable = {
				name = stele_container
				value = root.var:recent_rank_increase
				years = fp1_stele_duration_value
			}
			# Plus we want to remember the _type_ of stele we've got, so we can check if it's a character or title in there later.
			set_variable = {
				name = stele_scope_type
				value = flag:title
				years = fp1_stele_duration_value
			}
			# Add the actual modifier.
			## Stronger version for counties with stele-liking cultures.
			if = {
				limit = { 
					culture = {
						has_cultural_pillar = tradition_pyramid_builders
					}
				}
				add_county_modifier = {
					modifier = fp1_stele_raising_promotion_strong
					years = fp1_stele_duration_value
					desc = obelisk_raising_promotion_strong_custom_desc
				}
			}
			## Weaker version for counties with cultures that don't.
			else = {
				add_county_modifier = {
					modifier = fp1_stele_raising_promotion_weak
					years = fp1_stele_duration_value
					desc = obelisk_raising_promotion_strong_custom_desc
				}
			}
			# Add a generic flag for easy value adjustments elsewhere.
			set_variable = {
				name = stele_slot_occupied
				value = yes
				years = fp1_stele_duration_value
			}
		}
	}
}

#	With type chosen, select a specific location.
obelisk_raising.0111 = {
	type = character_event
	title = fp1_other_decisions.0111.t
	desc = {
		desc = fp1_other_decisions.0111.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = { scope:stele_type = flag:ancestor }
				desc = obelisk_raising.0111.desc.ancestor
			}
			triggered_desc = {
				trigger = { scope:stele_type = flag:conquest }
				desc = obelisk_raising.0111.desc.conquest
			}
			triggered_desc = {
				trigger = { scope:stele_type = flag:promotion }
				desc = obelisk_raising.0111.desc.promotion
			}
		}
		desc = obelisk_raising.0111.desc.outro
	}
	theme = faith
	left_portrait = {
		character = root
		# We grieve ancestors.
		triggered_animation = {
			trigger = { scope:stele_type = flag:ancestor }
			animation = grief
		}
		# And celebrate successes.
		triggered_animation = {
			trigger = {
				NOT = { scope:stele_type = flag:ancestor }
			}
			animation = personality_bold
		}
	}
	right_portrait = {
		character = scope:secondary_portrait
		# Ancestors show piety.
		triggered_animation = {
			trigger = { scope:stele_type = flag:ancestor }
			animation = personality_zealous
		}
		# Foes show disgust.
		triggered_animation = {
			trigger = { scope:stele_type = flag:conquest }
			animation = disgust
		}
	}
	override_background = { event_background = fp1_runestone }

	trigger = {
		culture = {
			has_cultural_pillar = tradition_pyramid_builders
		}
	}

	immediate = {
		# First, we need to grab all of root's personally held counties.
		every_held_title = {
			limit = { tier = tier_county }
			add_to_list = personally_held_counties_list
		}
		# Then we sort them out according to the effectiveness of the modifiers.
		## Ancestor stelae want stele-valid areas with low popular opinion.
		if = {
			limit = { scope:stele_type = flag:ancestor }
			ordered_in_list = {
				list = personally_held_counties_list
				max = raise_stele_county_preference_cap_value
				order_by = raise_stele_variant_ancestor_value
				# Grab three options.
				if = {
					limit = {
						NOT = { exists = scope:location_a }
					}
					save_scope_as = location_a
				}
				else_if = {
					limit = {
						NOR = {
							this = scope:location_a
							exists = scope:location_b
						}
					}
					save_scope_as = location_b
				}
				else_if = {
					limit = {
						NOR = {
							this = scope:location_a
							this = scope:location_b
							exists = scope:location_c
						}
					}
					save_scope_as = location_c
				}
			}
		}
		## Conquest stelae want stele-valid areas with low control.
		else_if = {
			limit = { scope:stele_type = flag:conquest }
			ordered_in_list = {
				list = personally_held_counties_list
				max = raise_stele_county_preference_cap_value
				order_by = raise_stele_variant_conquest_value
				# Grab three options.
				if = {
					limit = {
						NOT = { exists = scope:location_a }
					}
					save_scope_as = location_a
				}
				else_if = {
					limit = {
						NOR = {
							this = scope:location_a
							exists = scope:location_b
						}
					}
					save_scope_as = location_b
				}
				else_if = {
					limit = {
						NOR = {
							this = scope:location_a
							this = scope:location_b
							exists = scope:location_c
						}
					}
					save_scope_as = location_c
				}
			}
		}
		## Promotion stelae want stele-valid areas with high development.
		else_if = {
			limit = { scope:stele_type = flag:promotion }
			ordered_in_list = {
				list = personally_held_counties_list
				max = raise_stele_county_preference_cap_value
				order_by = raise_stele_variant_promotion_value
				# Grab three options.
				if = {
					limit = {
						NOT = { exists = scope:location_a }
					}
					save_scope_as = location_a
				}
				else_if = {
					limit = {
						NOR = {
							this = scope:location_a
							exists = scope:location_b
						}
					}
					save_scope_as = location_b
				}
				else_if = {
					limit = {
						NOR = {
							this = scope:location_a
							this = scope:location_b
							exists = scope:location_c
						}
					}
					save_scope_as = location_c
				}
			}
		}
		# If, for some reason, we have no designated county, just pick their capital.
		else_if = {
			limit = {
				NOT = { exists = scope:location_a }
			}
			capital_county = { save_scope_as = location_a }
		}
		# Next, try to set up a secondary portrait.
		## Ancestors can be shown.
		if = {
			limit = { scope:stele_type = flag:ancestor }
			var:ancestor_to_bury = { save_scope_as = secondary_portrait }
		}
		## As can beaten foes.
		else_if = {
			limit = { scope:stele_type = flag:conquest }
			var:recent_conquest_victory = { save_scope_as = secondary_portrait }
		}
		## But there's no secondary character available for promotion steles.
		# Finally, take care of generic stele effects.
		fp1_apply_generic_stele_bonuses_effect = yes
	}

	# Scope:location_a sounds good.
	option = {
		name = obelisk_raising.0111.a

		# Sort the local stele.
		fp1_apply_stele_effects = { LOCATION = scope:location_a }

		# No stress impact for arbitrary choice.
		ai_chance = {
			# AI should always pick the best option.
			base = 100
		}
	}
	
	# Scope:location_b is a decent spot.
	option = {
		name = obelisk_raising.0111.b
		trigger = { exists = scope:location_b }

		# Sort the local stele.
		fp1_apply_stele_effects = { LOCATION = scope:location_b }

		# No stress impact for arbitrary choice.
		ai_chance = {
			# AI should always pick the best option; the first one.
			base = 0
		}
	}
	
	# Scope:location_c makes a fine choice.
	option = {
		name = obelisk_raising.0111.c
		trigger = { exists = scope:location_c }

		# Sort the local stele.
		fp1_apply_stele_effects = { LOCATION = scope:location_c }

		# No stress impact for arbitrary choice.
		ai_chance = {
			# AI should always pick the best option; the first one.
			base = 0
		}
	}

	# Run some mild clean-up.
	after = {
		# Remove used variables.
		if = {
			limit = { scope:stele_type = flag:ancestor }
			set_variable = {
				name = has_raised_obelisk_for_ancestor
				scope = root
			}
		}
		else_if = {
			limit = { scope:stele_type = flag:conquest }
			remove_variable = recent_conquest_victory
		}
		else_if = {
			limit = { scope:stele_type = flag:promotion }
			remove_variable = recent_rank_increase
		}
	}
}

#	Error suppression.
obelisk_raising.0112 = {
	hidden = yes
	orphan = yes

	immediate = {
		if = {
			limit = {
				exists = var:stele_container
				exists = var:stele_commissioner
				exists = var:stele_carver
			}
			# TIT-23473
			# No effect needed.
		}
	}
}

#	New holder for a county with a stele.
obelisk_raising.0113 = {
	hidden = yes
	
	trigger = {
		# Use expanded version if we have FP1.
			culture = {
				has_cultural_pillar = tradition_pyramid_builders
			}
		# Using a scripted effect here so we can look at the same trigger in the grant title interaction
		fp1_remove_stele_new_holder_trigger = {
			TITLE = scope:title
			PREVIOUS_HOLDER = scope:previous_holder
			NEW_HOLDER = root
		}
	}

	immediate = {
		# Blanket remove all types.
		scope:title = {
			remove_variable = stele_container
			remove_variable = stele_carver
			remove_variable = stele_commissioner
			remove_variable = stele_slot_occupied
			remove_county_modifier = fp1_stele_raising_ancestors_strong
			remove_county_modifier = fp1_stele_raising_ancestors_weak
			remove_county_modifier = fp1_stele_raising_conquest_strong
			remove_county_modifier = fp1_stele_raising_conquest_weak
			remove_county_modifier = fp1_stele_raising_promotion_strong
			remove_county_modifier = fp1_stele_raising_promotion_weak
		}
	}
}
